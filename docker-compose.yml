services:
  # Nginx Reverse Proxy (Production only)
  nginx:
    image: nginx:alpine
    container_name: pdftrackr_nginx
    ports:
      - "80:80"
      - "8080:8080"  # Monitoring endpoints
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - pdftrackr-network
    restart: unless-stopped
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pdftrackr_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-pdftrackr}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - pdftrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-pdftrackr}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: >
      postgres 
      -c shared_buffers=64MB
      -c effective_cache_size=128MB
      -c maintenance_work_mem=16MB
      -c max_connections=50
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: pdftrackr_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - pdftrackr-network
    restart: unless-stopped  
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    command: redis-server --maxmemory 48mb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'

  # ClamAV Antivirus Scanner
  clamav:
    image: clamav/clamav-debian:1.3
    container_name: pdftrackr_clamav
    ports:
      - "3310:3310"
    volumes:
      - clamav_data:/var/lib/clamav
    networks:
      - pdftrackr-network
    restart: unless-stopped
    environment:
      - CLAMAV_NO_FRESHCLAMD=false
      - CLAMAV_NO_CLAMD=false
    healthcheck:
      test: ["CMD", "clamdscan", "--version"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 300s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: ${NODE_ENV}
    container_name: pdftrackr_backend
    env_file:
      - .env
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    # No volume mounts for production - use built files in container
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      clamav:
        condition: service_started
    networks:
      - pdftrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: ${BACKEND_COMMAND:-npm start}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.75'

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      target: ${NODE_ENV}
    container_name: pdftrackr_frontend
    env_file:
      - .env
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    # No volume mounts for production
    networks:
      - pdftrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 60s
      timeout: 15s
      retries: 5
      start_period: 60s
    command: ${FRONTEND_COMMAND:-npm start}
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Prometheus (Optional - Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: pdftrackr_prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=${PROMETHEUS_RETENTION:-30d}'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.size=2GB'
    networks:
      - pdftrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    profiles:
      - monitoring

  # Grafana (Optional - Monitoring)
  grafana:
    image: grafana/grafana:latest
    container_name: pdftrackr_grafana
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-your-secret-key}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - pdftrackr-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  clamav_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  pdftrackr-network:
    driver: bridge