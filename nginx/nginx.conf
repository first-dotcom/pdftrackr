user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Bot-aware rate limiting key: exempt known search engine crawlers
    map $http_user_agent $limit_zone {
        default $binary_remote_addr;
        ~*(googlebot|bingbot|yandexbot|duckduckbot|baiduspider|applebot|slurp|facebookexternalhit|linkedinbot|twitterbot) "";
    }

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 50M;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Rate limiting zones (bots excluded via $limit_zone for api/general)
    limit_req_zone $limit_zone zone=api:10m rate=30r/s;
    limit_req_zone $limit_zone zone=general:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

    # Upstream definitions
    upstream backend {
        server backend:3001;
        keepalive 32;
    }

    upstream frontend {
        server frontend:3000;
        keepalive 32;
    }

    # Redirect HTTP to HTTPS
    server {
        listen 80;
        server_name pdftrackr.com www.pdftrackr.com;
        
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        location / {
            return 301 https://$server_name$request_uri;
        }
    }

    # Redirect HTTPS www to apex
    server {
        listen 443 ssl;
        http2 on;
        server_name www.pdftrackr.com;

        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;

        return 301 https://pdftrackr.com$request_uri;
    }

    # Main HTTPS server block
    server {
        listen 443 ssl;
        http2 on;
        server_name pdftrackr.com;

        # SSL Configuration
        # SSL certificates should be placed in the nginx/ directory alongside nginx.conf
        # - cert.pem (or fullchain.pem for Let's Encrypt)
        # - key.pem (or privkey.pem for Let's Encrypt)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        
        # Alternative Let's Encrypt configuration (uncomment if using Let's Encrypt):
        # ssl_certificate /etc/nginx/ssl/fullchain.pem;
        # ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        # SSL stapling disabled due to certificate not having OCSP responder URL
        # ssl_stapling on;
        # ssl_stapling_verify on;
        
        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.clerk.com https://*.clerk.com https://*.clerk.accounts.dev https://*.clerk.dev https://clerk.pdftrackr.com https://accounts.pdftrackr.com https://challenges.cloudflare.com https://www.googletagmanager.com https://www.google-analytics.com https://ssl.google-analytics.com https://static.cloudflareinsights.com; style-src 'self' 'unsafe-inline'; img-src 'self' data: https: https://www.google-analytics.com https://ssl.google-analytics.com; font-src 'self' data:; connect-src 'self' https://api.clerk.com https://*.clerk.com https://*.clerk.accounts.dev https://*.clerk.dev https://clerk.pdftrackr.com https://accounts.pdftrackr.com https://clkmail.pdftrackr.com https://*.digitaloceanspaces.com https://pdftrackr.nyc3.digitaloceanspaces.com localhost:3001 https://www.google-analytics.com https://analytics.google.com https://region1.google-analytics.com https://ssl.google-analytics.com https://www.googletagmanager.com https://cloudflareinsights.com; frame-src https://*.clerk.com https://*.clerk.accounts.dev https://*.clerk.dev https://clerk.pdftrackr.com https://accounts.pdftrackr.com https://challenges.cloudflare.com; worker-src 'self' blob:;" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # API routes
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # CORS headers for API
            add_header Access-Control-Allow-Origin $http_origin always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
            add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
            
            if ($request_method = 'OPTIONS') {
                add_header Access-Control-Allow-Origin $http_origin;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
                add_header Access-Control-Max-Age 1728000;
                add_header Content-Type 'text/plain; charset=utf-8';
                add_header Content-Length 0;
                return 204;
            }
        }

        # Static files (Next.js)
        location /_next/static/ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off;
        }

        # Public files
        location /public/ {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public";
        }

        # Handle favicon.ico
        location = /favicon.ico {
            proxy_pass http://frontend;
            expires 1y;
            add_header Cache-Control "public";
            access_log off;
        }

        # All other routes go to frontend
        location / {
            # Apply general rate limiting - more generous for crawlers
            limit_req zone=general burst=20 nodelay;
            
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s;
            proxy_connect_timeout 75s;
            
            # Add debug logging for troubleshooting
            access_log /var/log/nginx/frontend_access.log main;
            error_log /var/log/nginx/frontend_error.log debug;
        }

        # Error pages
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }

    # Monitoring endpoints (optional)
    # server {
    #     listen 8080;
    #     server_name _;
        
    #     location /metrics {
    #         proxy_pass http://prometheus:9090;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
        
    #     location /grafana/ {
    #         proxy_pass http://grafana:3000/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }
}